load("@aspect_rules_py//py:defs.bzl", "py_binary")

"""Targets in the workspace root"""

load("@pip//:requirements.bzl", "all_whl_requirements")
load("@pip.test//:requirements.bzl", all_test_requirements = "all_whl_requirements")
load("@rules_python_gazelle_plugin//manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python_gazelle_plugin//modules_mapping:def.bzl", "modules_mapping")

alias(
    name = "format",
    actual = "//tools/format",
)

exports_files(
    [
        ".shellcheckrc",
        "pyproject.toml",
    ],
    visibility = ["//:__subpackages__"],
)

# Set `aspect configure` to produce aspect_rules_py targets rather than rules_python
# aspect:map_kind py_binary py_binary @aspect_rules_py//py:defs.bzl
# aspect:map_kind py_library py_library @aspect_rules_py//py:defs.bzl
# aspect:map_kind py_test py_test @aspect_rules_py//py:defs.bzl

# Fetches metadata for python packages we depend on.
modules_mapping(
    name = "modules_map",
    wheels = all_whl_requirements + all_test_requirements,
)

# Provide a mapping from an import to the installed package that provides it.
# Needed to generate BUILD files for .py files.
# This macro produces two targets:
# - //:gazelle_python_manifest.update can be used with `bazel run`
#   to recalculate the manifest
# - //:gazelle_python_manifest.test is a test target ensuring that
#   the manifest doesn't need to be updated
gazelle_python_manifest(
    name = "gazelle_python_manifest",
    modules_mapping = ":modules_map",
    pip_repository_name = "pip",
)
